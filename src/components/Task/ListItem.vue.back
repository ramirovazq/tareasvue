<template>
                <li  class="list-group-item task-list-item" 
                    :class="{editing: editing, completed: !task.pending}">
                    <a href="#" @click="toggleStatus" >
                        <app-icon :img="task.pending ? 'unchecked' : 'check'"></app-icon></a>

                    <template v-if="!editing">
                        <span class="description">{{task.description}}</span>    
                        <div>
                            <a @click="edit"><app-icon img="edit"></app-icon></a>
                            <a @click="remove"><app-icon img="trash"></app-icon></a>
                        </div>
                    </template>

                    <template v-else >
                        <input type="text" v-model="draft">
                        <div>
                            <a @click="update"><app-icon img="ok"></app-icon></a>
                            <a @click="discard"><app-icon img="remove"></app-icon></a>
                        </div>
                    </template>

                </li>

</template>

<script>
import Icon from 'components/Icon.vue'
export default {
                components: {
                'app-icon': Icon
                },
                data: function(){
                    return {
                        editing: false,
                        draft: ""
                    };
                },
                props: ['task', 'index'],
                created() {
                    EventBus.$on('editing', index => {
                        if(this.index != index){
                            this.discard();
                        }
                    });
                },
                methods: {
                    toggleStatus(){
                        this.task.pending = !this.task.pending;
                    },
                    edit(){

                        EventBus.$emit('editing', this.index);
                        /*
                        this.tasks.forEach(function(task){
                            this.editing = false;
                        })
                        */
                        this.draft = this.task.description;                        
                        this.editing = true;
                    },
                    update(){
                        this.task.description = this.draft;
                        this.editing = false;
                    },
                    discard(task){
                        this.editing = false;
                    },
                    remove(){
                        // this.tasks.splice(this.index, 1);
                        this.$emit('remove', this.index);
                    },

                }
            }
</script>


<style type="text/css">
    .tasks a {
    text-decoration: none;
}

.task-list-item {
    display: flex;
    justify-content: space-between;
}

.task-list-item.editing {
    box-shadow: inset 0 0 5px #999;
}

.task-list-item input, .task-list-item .description {
    flex: 1;
    padding: 0 5px;
}

.task-list-item input {
    border: 0;
}

.task-list-item input:focus {
    outline: none;
}

.task-list-item.completed .description {
    text-decoration: line-through;
}

.task-list-item.completed, .task-list-item.completed a {
    color: #999;
}
</style>